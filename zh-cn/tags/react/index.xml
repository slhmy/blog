<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on slhmy 的博客</title><link>https://slhmy.github.io/blog/zh-cn/tags/react/</link><description>Recent content in React on slhmy 的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 11 Sep 2022 11:22:00 +0800</lastBuildDate><atom:link href="https://slhmy.github.io/blog/zh-cn/tags/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Unity 游戏发布到浏览器</title><link>https://slhmy.github.io/blog/zh-cn/p/unity-game-in-web/</link><pubDate>Sun, 11 Sep 2022 11:22:00 +0800</pubDate><guid>https://slhmy.github.io/blog/zh-cn/p/unity-game-in-web/</guid><description>&lt;img src="https://slhmy.github.io/blog/zh-cn/p/unity-game-in-web/preview.png" alt="Featured image of post Unity 游戏发布到浏览器" />&lt;h2 id="前言">前言
&lt;/h2>&lt;p>制作游戏一直都是我比较感兴趣的一件事情。
这次有时间自己尝试了一下，发现过程上其实还挺简单的，
关键的可能还是需要对前端有一些基本的认识，然后知道 WebGL、WebAssembly 啥的，
这样在实践的时候不会在大方向上出现问题。&lt;/p>
&lt;p>这篇文章会复现整个项目的制作流成，目的是提供一个大致清晰的制作方向给大家。&lt;/p>
&lt;h2 id="制作你的unity游戏">制作你的Unity游戏
&lt;/h2>&lt;p>这块会使用到的就是一个比较成熟的 Unity 工具链。
这个例子当中，我使用的是一个 Unity 社区当中的教程模板 &lt;a class="link" href="https://learn.u3d.cn/tutorial/unity-microgame-karting#" target="_blank" rel="noopener"
>Karting Microgame&lt;/a>，
你可以在 Unity Hub 中新建项目的时候找到它的模板。
这个模板中会简单的教会你一些 Unity 的使用（包括测试、修改属性、添加物体、发布等），
当你简单地对 Unity 有了了解之后，你就可以尝试打包发布你的游戏。&lt;/p>
&lt;p>打包完成之后你会得到如下图所示的目录结构：&lt;/p>
&lt;img src="unity-webgl-builds-structure.png" width="50%" alt="builds-structure"/>
&lt;p>其中 &lt;code>Build&lt;/code> 目录下的就是我们游戏打包出来的主体，其它外部的是一些默认的配置和资源。
我们可以利用 Node 的 &lt;a class="link" href="https://www.npmjs.com/package/http-server" target="_blank" rel="noopener"
>http-server&lt;/a>，
在 &lt;code>WebGL Builds&lt;/code>（或者对应的打包出来的根目录）起一个 HTTP Server，
这样就可以在浏览器中看到游戏是否在正常运行。&lt;/p>
&lt;img src="unity-webgl-default-view.png" width="50%" alt="default-view">
&lt;h3 id="打包时可能会遇到的问题">打包时可能会遇到的问题
&lt;/h3>&lt;p>在 Unity 默认配置下打包的时候，可能发布出来的游戏在加载阶段会报无法加载 gzip 的报错，修改了 HTTP Server 的配置可能还是会出同样的报错。&lt;/p>
&lt;p>这个问题目前判断下来是因为 Unity 内核的一些问题导致，
所以可能需要修改一下在 &lt;code>Edit/Project Settings/Player/Settings for WebGL&lt;/code> 下的打包目标的配置，
配置方法可以参考下图：&lt;/p>
&lt;img src="unity-webgl-publishing-settings.png" width="50%" alt="publish-setting">
&lt;h2 id="将unity游戏嵌入到react项目当中">将Unity游戏嵌入到React项目当中
&lt;/h2>&lt;p>这里就是使用了一个 Node 的依赖，&lt;a class="link" href="https://www.npmjs.com/package/react-unity-webgl" target="_blank" rel="noopener"
>React Unity WebGL&lt;/a>&lt;/p>
&lt;p>大致的使用方法如下:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-javaScript" data-lang="javaScript">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="nx">DashboardPage&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">unityProvider&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useUnityContext&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loaderUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;/game/build/kart.loader.js&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dataUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;/game/build/kart.data.unityweb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">frameworkUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;/game/build/kart.framework.js.unityweb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">codeUrl&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;/game/build/kart.wasm.unityweb&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Unity&lt;/span> &lt;span class="nx">unityProvider&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">unityProvider&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">800&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">600&lt;/span> &lt;span class="p">}}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这是一个比较简单的使用例子，可以看到在 &lt;code>useUnityContext&lt;/code> 中，我们提供的信息其实就是之前介绍到的主体。&lt;/p></description></item><item><title>React 基础</title><link>https://slhmy.github.io/blog/zh-cn/p/react-hooks/</link><pubDate>Wed, 31 Aug 2022 19:00:00 +0800</pubDate><guid>https://slhmy.github.io/blog/zh-cn/p/react-hooks/</guid><description>&lt;h2 id="hooks">Hooks
&lt;/h2>&lt;p>&lt;a class="link" href="https://zhuanlan.zhihu.com/p/443264124" target="_blank" rel="noopener"
>【知乎】react-hooks原理解析&lt;/a>&lt;/p>
&lt;p>常见钩子：&lt;/p>
&lt;ul>
&lt;li>&lt;code>useState&lt;/code>&lt;/li>
&lt;li>&lt;code>useEffect&lt;/code>&lt;/li>
&lt;li>&lt;code>useContext&lt;/code>&lt;/li>
&lt;li>&lt;code>useReducer&lt;/code>&lt;/li>
&lt;li>&lt;code>useRef&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>生命周期：挂载 &amp;ndash;&amp;gt; 更新 &amp;ndash;&amp;gt; 卸载&lt;/p>
&lt;h2 id="virtual-dom">Virtual Dom
&lt;/h2>&lt;p>参考链接：
&lt;a class="link" href="https://zhuanlan.zhihu.com/p/462727885" target="_blank" rel="noopener"
>【知乎】剖析React核心设计原理&amp;ndash;Virtual Dom&lt;/a>&lt;/p>
&lt;h3 id="virtual-dom的作用">Virtual Dom的作用
&lt;/h3>&lt;p>Virtual Dom是对HTML Dom的JavaScript形式的封装&lt;/p>
&lt;blockquote>
&lt;p>Virtual DOM是一种编程方式，它以对象的形式保存在内存中，它描述了我们DOM的必要信息，并且用类似react-dom等模块与真实DOM同步，这一过程也叫协调(reconciler)，这种方式可以声明式的渲染相应的ui状态，让我们从DOM操作中解放出来&lt;/p>
&lt;/blockquote>
&lt;p>我理解有了Virtual Dom之后，弱化了开发者对于原生HTML Dom的感知，这样更方便我们在JavaScript层面去修改页面的动态元素。&lt;/p></description></item></channel></rss>